//  ___________________________________________________________________
// /                                                                   \
// |            _           _   _   _                                  |
// |           | |__  _ __ / \ | |_| |__   ___ _ __   __ _             |
// |           | '_ \| '__/ _ \| __| '_ \ / _ \ '_ \ / _` |            |
// |           | |_) | | / ___ \ |_| | | |  __/ | | | (_| |            |
// |           |_.__/|_|/_/   \_\__|_| |_|\___|_| |_|\__,_|            |
// |                                                                   |
// |                        brAthena  Script                           |
// |                        www.brathena.org                           |
// |-------------------------------------------------------------------|
// |                                                                   |
// | Copyright (c) brAthena Dev Team                                   |
// |                                                                   |
// |-------------------------------------------------------------------|
// | Licenciado sob a licenca GNU GPL                                  |
// | Para mais informações leia o arquivo LICENSE na raíz do emulador  |
// |-------------------------------------------------------------------|
// | Autor:                                                            |
// |		- Euphy                                                    |
// | Tradução:                                                         |
// |        - Paglia Host                                              |
// | Revisão:                                                          |
// |		- Orce                                                     |
// |                                                                   |
// |---- Versão atual--------------------------------------------------|
// |        - 1.6                                                      |
// |---- Descrição: ---------------------------------------------------|
// | Um controlador para Guerra do Emperium projetado para             |
// | simplicidade e facilidade de uso.                                 |
// | Muitos conceitos tomados do script do ToastOfDoom,                |
// | e "recompensas" tem função original por Goddameit.                |
// |-------------------------------------------------------------------|
// | Certifique-se de desabilitar os controladores padrão!             |
// |   npc\gde\1ed\1ed_controlador.txt                                 |
// |   npc\gde\2ed\2ed_controlador.txt                                 |
// \___________________________________________________________________/

// |-----------------------------------------------------------
// | NPC de informação
// |-----------------------------------------------------------
prontera,170,181,4	script	Controlador Woe	2_BOARD1,{
	doevent "WOE_CONTROL::OnMenu";
	end;
OnAgitStart:
	while(agitcheck()) {
		misceffect EF_BEGINSPELL6;
		sleep 425;
	}
	end;
}

-	script	WOE_CONTROL	-1,{
function Disp_Owner; function Add_Zero;

OnInit:

// |-----------------------------------------------------------
// | definições do comando para chamar o NPC
// |-----------------------------------------------------------
	bindatcmd "woeconfig", "WOE_CONTROL::OnMenu";

// |-----------------------------------------------------------
// | definições de configuração.
// |-----------------------------------------------------------

	set .CastleWarp,0;		// | 1: Sempre ativar tudo teletransporte do castelo. | 0: Teletransporta apenas castelos ativos.
	set .AutoKick,1;		// | Teletransporta automaticamente jogadores de castelos inativos durante WOE? (1:yes / 0:no)
	set .NoOwner,0; 		// | Teletransporta automaticamente jogadores de castelos conquistados fora da WOE? (1:yes / 0:no)
	set .ExitWarp,0;		// | Teletransporta todos os jogadores de castelos quando WOE termina? (1:yes / 0:no)
	set .GMAccess,99;		// | Level de Gm requerido para acessar a sessão de gerenciamento.


// |-----------------------------------------------------------
// | opções de recompensa.
// |-----------------------------------------------------------
// | [1] Ativar recompensas.
// | [2] Enviar todas as recompensas.
// |     - Se não for definido, os jogadores recebem itens em seu inventário.
// |     - Apenas um item pode ser enviado via e-mail, além de Zeny.
// |     - Note-se que os jogadores off-line não recebem recompensas.
// | [4] Apenas premiar Guild Masters.
// |     - Se não for definido, todos os membros da guilda são recompensados.
// |     - Se o correio está habilitado (opção 2), off Guild Master da receberão recompensas.
// | [8]Duplicar verificação IP.
// |     - Membros em um guilda com o mesmo endereço IP não são recompensados.
// |     - Se Guild Master de está habilitado (opção 4), esse recurso não é utilizado.
// |-----------------------------------------------------------

	// Combine valores conforme necessário (ex. 1|8 = 1+8 = 9).
	// Neste ex esta configurado para ativar o sistema e fazer verificação de IP.
	set .Options, 1|8;

	// Recompensas por castelo.
	// -- Quando administrado diretamente: <itemID>,<amount>{,<itemID>,<amount>,...}
	// -- por correio (opção 2): <itemID>,<amount>,<Zeny>
	setarray .Reward[0],14001,1;

// |-----------------------------------------------------------
// | Constants (leave this section alone).
// |-----------------------------------------------------------

	setarray .Castles$[0],
		"prtg_cas01","prtg_cas02","prtg_cas03","prtg_cas04","prtg_cas05",
		"payg_cas01","payg_cas02","payg_cas03","payg_cas04","payg_cas05",
		"gefg_cas01","gefg_cas02","gefg_cas03","gefg_cas04","gefg_cas05",
		"aldeg_cas01","aldeg_cas02","aldeg_cas03","aldeg_cas04","aldeg_cas05",
		"arug_cas01","arug_cas02","arug_cas03","arug_cas04","arug_cas05",
		"schg_cas01","schg_cas02","schg_cas03","schg_cas04","schg_cas05";
	setarray .EndLabel$[0],"ar01","ar02","ar03","ar04","ar05","sc01","sc02","sc03","sc04","sc05";
	setarray .Days$[0],"Domingo","Segunda-Feira","Terça-Feira","Quarta-feira","Quinta-Feira","Sexta-Feira","Sábado";
	setarray .Regions$[0],"Prontera","Payon","Geffen","Aldebaran","Arunafeltz","Schwaltzvalt";
	setarray .map$[0],"prt_gld","pay_gld","gef_fild13","alde_gld","aru_gld","sch_gld";
	setarray .mapx[0],134,240,153,111,208,121,295,317,140,204,214,308,143,193,305,48, 95,142,239,264,158,83, 68,299,292,293,288, 97,137, 71;
	setarray .mapy[0], 65,128,137,240,240,233,116,293,160,266, 75,240,240,278, 87,83,249, 85,242, 90,272,47,155,345,107,100,252,196, 90,315;

// |-----------------------------------------------------------

	set .Size, getarraysize($WOE_CONTROL);
	if (.AutoKick || .NoOwner)
		for(set .@i,0; .@i<30; set .@i,.@i+1) {
			setmapflag .Castles$[.@i], mf_loadevent;
			setd "."+.Castles$[.@i], .@i;
		}
	if (!agitcheck() && !agitcheck2()) sleep 4000;
	set .Init,1;

OnMinute00:
	freeloop(1);
	if (agitcheck() || agitcheck2()) {
		for(set .@i,0; .@i<.Size; set .@i,.@i+4)
			if (gettime(4) == $WOE_CONTROL[.@i] && gettime(3) == $WOE_CONTROL[.@i+2]) {
			OnWOEEnd:
				announce "A Guerra de Emperium acabou!",bc_all|bc_woe;
				agitend; agitend2;
				sleep 1000;
				for(set .@j,0; .@j<30; set .@j,.@j+1) {
					if (.Active[0]&(1<<.@j)) Disp_Owner(.Castles$[.@j],1);
					if (.ExitWarp) maprespawnguildid .Castles$[.@j],0,3;
				}
				if (.Options&1 && .Active[0] && .ForceEnd != 2) callsub OnReward, .Active[0];
				deletearray .Active[0],2;
				if (.ForceEnd) { set .ForceEnd,0; end; }
				break;
			}
	}
	if ((!agitcheck() && !agitcheck2()) || .Init) {
		if (!agitcheck() && !agitcheck2()) set .Init,0;
		for(set .@i,0; .@i<.Size; set .@i,.@i+4)
			if (gettime(4) == $WOE_CONTROL[.@i] && gettime(3) >= $WOE_CONTROL[.@i+1] && gettime(3) < $WOE_CONTROL[.@i+2]) {
				deletearray .Active[0],2;
				set .Active[0], $WOE_CONTROL[.@i+3];
				if (.Init) { agitend; agitend2; }
				else announce "A Guerra de Emperium começou!",bc_all|bc_woe;
				agitstart; agitstart2;
				sleep 1000;
				for(set .@j,0; .@j<30; set .@j,.@j+1) {
					if (.Active[0]&(1<<.@j)) {
						if (!.Init) Disp_Owner(.Castles$[.@j],0);
						set .Active[1], .Active[1] | (1<<((.@j/5)+1));
					} else {
						if (.@j<20) {
							donpcevent "Agit#"+.Castles$[.@j]+"::OnAgitEnd";
							killmonster .Castles$[.@j], "Agit#"+.Castles$[.@j]+"::OnAgitBreak";
						} else {
							donpcevent "Gerenciador#"+.Castles$[.@j]+"::OnAgitEnd2";
							killmonster .Castles$[.@j], "Steward#"+.EndLabel$[.@j-20]+"::OnStartArena";
						}
					}
				}
				break;
			}
	}
	set .Init,0;
	end;

function Disp_Owner {
	set .@o, getcastledata(getarg(0),1);
	if (.@o) announce "O castelo ["+getcastlename(getarg(0))+"] "+((getarg(1))?"foi conquistado":"é ocupado")+" pelo Clã ["+getguildname(.@o)+"].",bc_all|bc_woe;
	else announce "O castelo ["+getcastlename(getarg(0))+"] está atualmente desocupado.",bc_all|bc_woe;
	return;
}
function Add_Zero {
	return ((getarg(0)<10)?"0":"")+getarg(0)+(getarg(1,0)?".":":")+"00";
}

OnReward:
	set .@sql$, ((.Options&4)?"position = 0":"online = 1");
	if (.Options&2) set .@str$,gettimestr("%B %d, %Y",21);
	freeloop(1);
	for(set .@i,0; .@i<30; set .@i,.@i+1)
		if (getarg(0)&(1<<.@i)) {
			set .@GID, getcastledata(.Castles$[.@i],1);
			if (!.@GID) continue;
			set .@size, query_sql("SELECT account_id,char_id FROM `guild_member` WHERE guild_id = '"+.@GID+"' AND "+.@sql$,.@aid,.@cid);
			for(set .@j,0; .@j<.@size; set .@j,.@j+1) {
				if (.Options&8 && !(.Options&4)) {
					set .@ip$, replacestr(getcharip(.@aid[.@j]),".","a");
					if (getd(".@ip_"+.@i+"_"+.@ip$)) continue;
					setd ".@ip_"+.@i+"_"+.@ip$,1;
				}
				if (.Options&2) {
					query_sql("INSERT INTO `mail` (send_name,dest_id,title,message,nameid,amount,identify,zeny,time) VALUES ("+
					          "'Não-Responda',"+.@cid[.@j]+",'** Siege Reward: "+getcastlename(.Castles$[.@i])+" **',"+
					          "'Bravo,% % Parabéns!% Sua aliança ocupou com sucesso% território na Guerra do Emperium em% "+.@str$+".% % % % % [ Sua recompensa está liberada. ]',"+
					          .Reward[0]+","+.Reward[1]+",0,"+.Reward[2]+",UNIX_TIMESTAMP(NOW()))");
					if (!getd(".@str_"+.@cid[.@j]) && isloggedin(.@aid[.@j],.@cid[.@j])) {
						setd ".@str_"+.@cid[.@j],1;
						message rid2name(.@aid[.@j]),"Você tem uma mensagem! Por favor, relogue para atualizar sua lista de endereços.";
					}
				} else if (isloggedin(.@aid[.@j])) {
					for(set .@k,0; .@k<getarraysize(.Reward); set .@k,.@k+2)
						getitem .Reward[.@k], .Reward[.@k+1], .@aid[.@j];
					message rid2name(.@aid[.@j]),"Você foi recompensado por conquistar o castelo "+getcastlename(.Castles$[.@i])+".";
				}
			}
		}
	if (.Options&2) query_sql("UPDATE `mail` SET message = REPLACE(message,'%',CHAR(13)) WHERE send_name = 'Não-Responda'");
	return;

OnPCLoadMapEvent:
	if (!compare(strcharinfo(3),"g_cas")) end;
	if (((.AutoKick && .Active[0]) || (.NoOwner && !getcastledata(strcharinfo(3),1))) && !(.Active[0]&(1<<getd("."+strcharinfo(3))))) {
		if (getcharid(2) && getcastledata(strcharinfo(3),1) == getcharid(2)) end;
		sleep2 1000;
		message strcharinfo(0), "O castelo "+getcastlename(strcharinfo(3))+" esta temporariamente desativado.";
		sleep2 5000;
		if (compare(strcharinfo(3),"g_cas")) warp "SavePoint",0,0;
	}
	end;

OnMenu:
while(1) {
	mes "[ Informações da WOE ]";
	if (agitcheck() || agitcheck2()) {
		if (.Active[0]) {
			for(set .@i,0; .@i<.Size; set .@i,.@i+4)
				if (gettime(4) == $WOE_CONTROL[.@i] && gettime(3) >= $WOE_CONTROL[.@i+1] && gettime(3) < $WOE_CONTROL[.@i+2]) {
					set .@i, $WOE_CONTROL[.@i+2];
					break;
				}
			mes "A Guerra do Emperium esta ^0055FFativa^000000 até as ^FF0000"+Add_Zero(.@i)+"^000000 nos seguintes feudos:";
			mes " ";
			for(set .@i,0; .@i<6; set .@i,.@i+1)
				if (.Active[1]&(1<<(.@i+1))) mes " > ^777777"+.Regions$[.@i]+"^000000";
		} else
			mes "A Guerra do Emperium esta ^0055FFativa^000000.";
	} else {
		for(set .@i,0; .@i<.Size; set .@i,.@i+4)
			if ((gettime(4) == $WOE_CONTROL[.@i] && gettime(3) <= $WOE_CONTROL[.@i+1]) || gettime(4) < $WOE_CONTROL[.@i]) {
				setarray .@time[0],$WOE_CONTROL[.@i],$WOE_CONTROL[.@i+1];
				break;
			}
		if (!getarraysize(.@time))
			setarray .@time[0],$WOE_CONTROL[0],$WOE_CONTROL[1];
		mes "A Guerra do Emperium está ^777777desativada^000000.";
		if (.Size) {
			mes " ";
			mes "A próxima vai ser:";
			mes "^0055FF"+.Days$[.@time[0]]+"^000000 as "+Add_Zero(.@time[1])+"^000000.";
		}
	}
	next;
	switch(select(""+((.CastleWarp || .Active[1])?"Ir para os castelo":"")+":Conferir Horários:Verificar castelos:"+((getgroupid()<.GMAccess || !getgroupid())?"":"Configurar Castelos")+":^777777Cancelar^000000")) {
	case 1:
		if (.CastleWarp) set .@clr$,"^0055FF";
		set .@menu$,"";
		for(set .@i,0; .@i<6; set .@i,.@i+1) {
			if (.CastleWarp || .Active[1]&(1<<(.@i+1)))
				set .@menu$, .@menu$+" ~ "+((.Active[1]&(1<<(.@i+1)))?.@clr$:"^777777")+.Regions$[.@i]+" castelo^000000";
			set .@menu$, .@menu$+":";
		}
		set .@i, select(.@menu$)-1;
		set .@menu$,"";
		for(set .@j,.@i*5; .@j<(.@i*5)+5; set .@j,.@j+1) {
			if (.CastleWarp || .Active[0]&(1<<.@j))
				set .@menu$, .@menu$+" ~ "+((.Active[0]&(1<<.@j))?.@clr$:"^777777")+getcastlename(.Castles$[.@j])+"^000000";
			set .@menu$, .@menu$+":";
		}
		set .@j, select(.@menu$)-1;
		warp .map$[.@i],.mapx[(.@i*5)+.@j],.mapy[(.@i*5)+.@j];
		close;
	case 2:
		mes "[Schedule]";
		if (.Size) {
			freeloop(1);
			for(set .@i,0; .@i<.Size; set .@i,.@i+4) {
				mes "> ^FF0000"+.Days$[$WOE_CONTROL[.@i]]+" ("+Add_Zero($WOE_CONTROL[.@i+1])+"-"+Add_Zero($WOE_CONTROL[.@i+2])+")^000000";
				for(set .@j,0; .@j<30; set .@j,.@j+1)
					if ($WOE_CONTROL[.@i+3]&(1<<.@j)) mes "  ~ "+getcastlename(.Castles$[.@j])+" ^777777("+.Castles$[.@j]+")^000000";
				if (.@i+4 < .Size) mes " ";
			}
			freeloop(0);
		} else
			mes "Nenhum vezes são configurados.";
		next;
		break;
	case 3:
		mes "[Castelo de propriedade]";
		for(set .@i,0; .@i<6; set .@i,.@i+1) {
			set .@k, .@i*5;
			mes "> ^FF0000"+.Regions$[.@i]+"^000000";
			for(set .@j,.@k; .@j<(.@k+5); set .@j,.@j+1) {
				set .@t, getcastledata(.Castles$[.@j],1);
				mes "  ~ "+getcastlename(.Castles$[.@j])+": "+((.@t)?"^0055FF"+getguildname(.@t):"^777777Desocupado")+"^000000";
			}
			if (.@i < 5) mes " ";
		}
		next;
		break;
	case 4:
	while(1) {
		mes "[Gerenciar Castelo]";
		mes "Existe"+(.Size/4 ==1? "":"m")+" ^0055FF"+(.Size/4)+" Grupo"+(.Size/4 ==1? "":"s")+"^000000 configurado"+(.Size/4 ==1? "":"s")+".";
		mes "O que você gostaria de fazer?";
		next;
		switch(select("Adicionar Grupo:Deletar Grupo:Atualizar:"+((agitcheck() || agitcheck2())?"Encerrar a guerra atual":"")+":^777777Volta^000000")) {
		case 1:
			mes "[Novo Grupo]";
			if (.Size > 127) {
				mes "Você já atingiu o máximo de 32 castelos.";
				next;
				break;
			}
			mes "Escolha um dia.";
			next;
			set .@day, select(" ~ "+implode(.Days$,": ~ "))-1;
			mes "[Novo Grupo]";
			mes "Selecione a hora de início ^0055FF"+.Days$[.@day]+"^000000.";
			next;
			set .@menu$,"";
			for(set .@i,0; .@i<23; set .@i,.@i+1)
				set .@menu$, .@menu$+" ~ "+Add_Zero(.@i,1)+":";
			set .@start, select(.@menu$)-1;
			mes "[Novo Grupo]";
			mes "Escolha um horário de término para ^0055FF"+.Days$[.@day]+"^000000.";
			next;
			set .@menu$,"";
			for(set .@i,.@start+1; .@i<24; set.@i,.@i+1)
				set .@menu$, .@menu$+" ~ "+Add_Zero(.@i,1)+":";
			set .@end, select(.@menu$)+.@start;
			for(set .@i,0; .@i<.Size; set .@i,.@i+4)
				if (.@day == $WOE_CONTROL[.@i] &&
				   ((.@start >= $WOE_CONTROL[.@i+1] && .@start < $WOE_CONTROL[.@i+2]) ||
				    (.@end > $WOE_CONTROL[.@i+1] && .@end <= $WOE_CONTROL[.@i+2]) ||
				    (.@start <= $WOE_CONTROL[.@i+1] && .@end >= $WOE_CONTROL[.@i+2]))) {
					mes "[Novo Grupo]";
					mes "As configurações de horário coincidem com outras.";
					next;
					set .@d,1;
					break;
				}
			if (.@d) { set .@d,0; break; }
			set .@castle,0;
			while(1) {
				mes "[Novo Grupo]";
				mes "^0055FF"+.Days$[.@day]+" ("+Add_Zero(.@start)+"-"+Add_Zero(.@end)+")^000000";
				mes " > Castelo:";
				if (!.@castle)
					mes "   ~ ^777777(Nenhum Selecionado)^000000";
				else for(set .@i,0; .@i<30; set .@i,.@i+1)
					if (.@castle&(1<<.@i)) mes "   ~ "+getcastlename(.Castles$[.@i])+" ("+.Castles$[.@i]+")";
				next;
				set .@menu$,((.@castle)?" ~ ^FF0000Finalizar escolha...^000000":"")+":";
				for(set .@i,0; .@i<30; set .@i,.@i+1)
					set .@menu$, .@menu$+" ~ "+((.@castle&(1<<.@i))?"^0055FF":"")+getcastlename(.Castles$[.@i])+" ("+.Castles$[.@i]+")^000000:";
				set .@i, select(.@menu$)-1;
				if (.@i)
					set .@castle, .@castle^(1<<(.@i-1));
				else {
					mes "[Novo Grupo]";
					mes "Você tem certeza?";
					next;
					switch(select("^0055FFSalvar Grupo.^000000:Continuar selecionando castelos...:^777777Cancelar^000000")) {
					case 1:
						for(set .@i,0; .@i<.Size; set .@i,.@i+4)
							if ((.@day == $WOE_CONTROL[.@i] && .@end <= $WOE_CONTROL[.@i+1]) || .@day < $WOE_CONTROL[.@i]) {
								set .@d,1;
								break;
							}
						if (!.@d) { set .@d,1; set .@i,.Size; }
						copyarray $WOE_CONTROL[.@i+4], $WOE_CONTROL[.@i], .Size-.@i;
						setarray $WOE_CONTROL[.@i], .@day, .@start, .@end, .@castle;
						set .Size, getarraysize($WOE_CONTROL);
					case 3:
						mes "[Novo Grupo]";
						mes ((.@d)?"Grupo adicionado.":"Cancelado.");
						next;
						set .@d,1;
					case 2:
						break;
					}
					if (.@d) { set .@d,0; break; }
				}
			}
			break;
		case 2:
			mes "[Remover Grupo]";
			if (!.Size) {
				mes "Não há grupo configurado.";
				next;
				break;
			}
			mes "Selecione um grupo para remover.";
			next;
			set .@menu$,"";
			for(set .@i,0; .@i<.Size; set .@i,.@i+4)
				set .@menu$, .@menu$+" ~ "+.Days$[$WOE_CONTROL[.@i]]+" ("+Add_Zero($WOE_CONTROL[.@i+1],1)+"-"+Add_Zero($WOE_CONTROL[.@i+2],1)+"):";
			set .@menu$, .@menu$+" ~ ^777777Cancelar^000000";
			set .@i, select(.@menu$)-1;
			if (.@i == (.Size/4)) break;
			mes "[Remover Grupo]";
			mes "Deletar o grupo de ^0055FF"+.Days$[$WOE_CONTROL[.@i*4]]+"^000000?";
			next;
			set .@j, select(" ~ ^FF0000Deletar grupo...^000000: ~ ^777777Cancelar^000000");
			mes "[Grupo Removido]";
			if (.@j == 2)
				mes "Cancelado.";
			else {
				deletearray $WOE_CONTROL[.@i*4],4;
				set .Size, getarraysize($WOE_CONTROL);
				mes "Grupo Deletado.";
			}
			next;
			break;
		case 3:
			mes "[Atualizar Configurações]";
			mes "Isso acionará todos os eventos relacionados a novas configurações de Castelo, se houver.";
			if (agitcheck() || agitcheck2()) {
				mes " ";
				mes "Esteja ciente de que isso vai atrapalhar a WOE atual.";
			}
			next;
			set .@i, select("^0055FFAtualizar Configuraçõees...^000000:^777777Cancelar^000000");
			mes "[Configurações atualizadas]";
			if (.@i == 2) mes "Cancelado.";
			else {
				set .Init,1;
				donpcevent "WOE_CONTROL::OnMinute00";
				mes "Configurações re-inicializadas.";
			}
			next;
			break;
		case 4:
			mes "[Force Agit End]";
			if (!agitcheck() && !agitcheck2())  {
				mes "WOE já terminou.";
				next;
				break;
			}
			mes "Este comando irá executar com segurança todos os eventos AgitEnd.";
			mes " ";
			mes "Encerrar a WOE atual?";
			next;
			set .@i, select("^FF0000Encerrar WoE^000000:"+((.Options&1)?"^FF0000Encerrar WoE sem recompensas^000000":"")+": ~ ^777777Cancelar^000000");
			mes "[Guerra do Emperium encerrada]";
			if (.@i == 3)
				mes "Cancelado.";
			else {
				set .ForceEnd, .@i;
				donpcevent "WOE_CONTROL::OnWOEEnd";
				mes "WOE Encerrada.";
			}
			next;
			break;
		case 5:
			set .@d,1; break;
		}
		if (.@d) { set .@d,0; break; }
		} break;
	case 5:
		close;
	} }
}
